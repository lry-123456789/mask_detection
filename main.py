# -*- coding: utf-8 -*-
from random import random
# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from copy import deepcopy,copy
import cv2
from ultralytics import YOLO
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5 import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import sys
import time
import os.path, os
import sqlite3
import torch
import numpy as np
import random
from yolov5.models.experimental import attempt_load
from yolov5.utils.general import check_img_size, non_max_suppression
def time_synchronized():
    # pytorch-accurate time
    if torch.cuda.is_available():
        torch.cuda.synchronize()
    return time.time()
def plot_one_box(x, img, color=None, label=None, line_thickness=3):
    # Plots one bounding box on image img
    tl = line_thickness or round(0.002 * (img.shape[0] + img.shape[1]) / 2) + 1  # line/font thickness
    color = color or [random.randint(0, 255) for _ in range(3)]
    c1, c2 = (int(x[0]), int(x[1])), (int(x[2]), int(x[3]))
    cv2.rectangle(img, c1, c2, color, thickness=tl, lineType=cv2.LINE_AA)
    if label:
        tf = max(tl - 1, 1)  # font thickness
        t_size = cv2.getTextSize(label, 0, fontScale=tl / 3, thickness=tf)[0]
        c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3
        cv2.rectangle(img, c1, c2, color, -1, cv2.LINE_AA)  # filled
        cv2.putText(img, label, (c1[0], c1[1] - 2), 0, tl / 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)
        if "no-mask" in label:
            print("1")
            cv2.putText(img, "WEAR MASK", (c1[0], c1[1] - 22 - 2), 0, tl / 3, [0, 0, 255], thickness=tf, lineType=cv2.LINE_AA)
        if "incorrect-mask" in label:
            print("2")
            cv2.putText(img, "WEAR MASK CORRECTLY", (c1[0], c1[1] - 22 - 2), 0, tl / 3, [0, 0, 255], thickness=tf, lineType=cv2.LINE_AA)

def letterbox(img, new_shape=(640, 640), color=(114, 114, 114), auto=True, scaleFill=False, scaleup=True, stride=32):
    # Resize and pad image while meeting stride-multiple constraints
    shape = img.shape[:2]  # current shape [height, width]
    if isinstance(new_shape, int):
        new_shape = (new_shape, new_shape)

    # Scale ratio (new / old)
    r = min(new_shape[0] / shape[0], new_shape[1] / shape[1])
    if not scaleup:  # only scale down, do not scale up (for better test mAP)
        r = min(r, 1.0)

    # Compute padding
    ratio = r, r  # width, height ratios
    new_unpad = int(round(shape[1] * r)), int(round(shape[0] * r))
    dw, dh = new_shape[1] - new_unpad[0], new_shape[0] - new_unpad[1]  # wh padding
    if auto:  # minimum rectangle
        dw, dh = np.mod(dw, stride), np.mod(dh, stride)  # wh padding
    elif scaleFill:  # stretch
        dw, dh = 0.0, 0.0
        new_unpad = (new_shape[1], new_shape[0])
        ratio = new_shape[1] / shape[1], new_shape[0] / shape[0]  # width, height ratios

    dw /= 2  # divide padding into 2 sides
    dh /= 2

    if shape[::-1] != new_unpad:  # resize
        img = cv2.resize(img, new_unpad, interpolation=cv2.INTER_LINEAR)
    top, bottom = int(round(dh - 0.1)), int(round(dh + 0.1))
    left, right = int(round(dw - 0.1)), int(round(dw + 0.1))
    img = cv2.copyMakeBorder(img, top, bottom, left, right, cv2.BORDER_CONSTANT, value=color)  # add border
    return img, ratio, (dw, dh)
def LoadImages(img_input,img_size = 640,stride = 32):
    """

    Args:
        img_input:
        img_size:
        stride:

    Returns:

    """
    img = letterbox(img_input,img_size,stride=stride)[0]
    # Convert
    img = img[:, :, ::-1].transpose(2, 0, 1)  # BGR to RGB, to 3x416x416
    img = np.ascontiguousarray(img)
    return None,img,img_input,False
def clip_coords(boxes, img_shape):
    # Clip bounding xyxy bounding boxes to image shape (height, width)
    boxes[:, 0].clamp_(0, img_shape[1])  # x1
    boxes[:, 1].clamp_(0, img_shape[0])  # y1
    boxes[:, 2].clamp_(0, img_shape[1])  # x2
    boxes[:, 3].clamp_(0, img_shape[0])  # y2
def scale_coords(img1_shape, coords, img0_shape, ratio_pad=None):
    # Rescale coords (xyxy) from img1_shape to img0_shape
    if ratio_pad is None:  # calculate from img0_shape
        gain = min(img1_shape[0] / img0_shape[0], img1_shape[1] / img0_shape[1])  # gain  = old / new
        pad = (img1_shape[1] - img0_shape[1] * gain) / 2, (img1_shape[0] - img0_shape[0] * gain) / 2  # wh padding
    else:
        gain = ratio_pad[0][0]
        pad = ratio_pad[1]

    coords[:, [0, 2]] -= pad[0]  # x padding
    coords[:, [1, 3]] -= pad[1]  # y padding
    coords[:, :4] /= gain
    clip_coords(coords, img0_shape)
    return coords
global main_ui
global Login_ui
global Register_ui
def database(input_type: str):
    if input_type == 'login':
        return "login.db"
    assert type(input_type)==str
    raise ValueError("no database named:"+input_type)

class show_license(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        MainWindow.setMinimumSize(QtCore.QSize(800, 600))
        MainWindow.setMaximumSize(QtCore.QSize(800, 600))
        self.MainWindow = MainWindow
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10, 0, 781, 501))
        self.textBrowser.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textBrowser.setObjectName("textBrowser")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(20, 510, 181, 41))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(190, 509, 161, 41))
        self.radioButton_2.setObjectName("radioButton_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(640, 510, 151, 41))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.pushButton.setEnabled(False)
        self.radioButton.clicked.connect(self.license_ok)
        self.radioButton_2.clicked.connect(self.license_no)
        self.radioButton_2.click()
        try:
            self.pushButton.clicked.connect(self.show_next)
        except Exception as e:
            print(e)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "第一次使用前须知"))
        self.textBrowser.setHtml(_translate("MainWindow",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'Microsoft YaHei UI\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                            "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:700;\">口罩佩戴检测系统1.0.0安装使用协议</span></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">请务必认真阅读和理解本《口罩佩戴检测系统安装许可使用协议》（以下简称“《协议》”）中规定的所有权利和限制。除非您接受本《协议》条款，否则您无权下载、安装或使用随附本《协议》的学生管理系统软件（以下简称“本软件”）及其相关服务。您一旦安装、复制、下载、访问或以其它方式使用本软件产品，将视为对本《协议》的接受，即表示您同意接受本《协议》各项条款的约束。如果您不同意本《协议》中的条款，请不要安装、复制或使用本软件。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">本《协议》是用户与LRY之间关于用户下载、安装、使用、复制本软件的法律协议。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1.权利声明</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">本软件的一切知识产权，以及与本软件相关的所有信息内容，包括但不限于：文字表述及其组合、图标、图饰、图像、图表、色彩、界面设计、版面框架、有关数据、附加程序、印刷材料或电子文档等均为LRY所有，受著作权法和国际著作权条约以及其他知识产权法律法规的保护。</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2.许可范围</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2.1 下载、安装和使用：本软件为免费软件，用户可以非商业性、无限制数量地下载、安装及使用本软件。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">2.2 复制、分发和传播：用户可以非商业性、无限制数量地复制、分发和传播本软件产品。但必须保证每一份复制、分发和传播都是完整和真实的,包括所有有关本软件产品的软件、电子文档,版权和商标，亦包括本协议。</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3.权利限制</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3.1 禁止反向工程、反向编译和反向汇编：用户不得对本软件产品进行反向工程（ReverseEngineer）、反向编译（Decompile）或反向汇编（Disassemble），同时不得改动编译在程序文件内部的任何资源。除法律、法规明文规定允许上述活动外，用户必须遵守此协议限制。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3.2 组件分割:本软件产品是作为一个单一产品而被授予许可使用,用户不得将各个部分分开用于任何目的。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3.3 个别授权:如需进行商业性的销售、复制、分发，包括但不限于软件销售、预装、捆绑等，必须获得LRY的书面授权和许可。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">3.4 保留权利：本协议未明示授权的其他一切权利仍归LRY所有，用户使用其他权利时必须获得LRY的书面同意。</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">4.用户使用须知</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">本程序只能用于非商业用途，如果用于商业用途，请向发布者获取商业授权许可。</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5．免责与责任限制</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5.1 用户确认，其知悉本软件所有功能及LRY为实现本软件各功能所进行的必要操作，其根据自身需求自愿选择使用本软件及相关服务，因使用本软件及相关服务所存在的风险和一切后果将完全由其自己承担，LRY不承担任何责任。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5.2 本软件经过详细的测试，但不能保证与所有的软硬件系统完全兼容，不能保证本软件完全没有错误。如果出现不兼容及软件错误的情况，用户可发送邮件至1224137702@qq.com将情况报告LRY，获得技术支持。如果无法解决兼容性问题，用户可以删除本软件。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5.3 在适用法律允许的最大范围内，对因使用或不能使用本软件所产生的损害及风险，包括但不限于直接或间接的个人损害、商业赢利的丧失、贸易中断、商业信息的丢失或任何其它经济损失，LRY不承担任何责任。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5.4 对于因电信系统或互联网网络故障、计算机故障或病毒、信息损坏或丢失、计算机系统问题或其它任何不可抗力原因而产生损失，LRY不承担任何责任。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">5.5 用户违反本协议规定，LRY有权采取包括但不限于中断使用许可、停止提供服务、限制使用、法律追究等措施。</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">6.法律及争议解决</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">6.1 本协议适用中华人民共和国法律。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">6.2 因本协议引起的或与本协议有关的任何争议，各方应友好协商解决；协商不成的，任何一方均可将有关争议提交至被告住所地有管辖权的法院诉讼解决。</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">7.其他条款</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">7.1 如果本协议中的任何条款无论因何种原因完全或部分无效或不具有执行力，或违反任何适用的法律，则该条款被视为删除，但本协议的其余条款仍应有效并且有约束力。</p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">7.2 LRY在法律允许最大范围内对本协议拥有解释权与修改权。</p>\n"
                                            "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p>\n"
                                            "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">8.如果您确定使用本软件，则自动视为同意本软件的所有条款。</p></body></html>"))
        self.radioButton.setText(_translate("MainWindow", "I Agree"))
        self.radioButton_2.setText(_translate("MainWindow", "I do not agree"))
        self.pushButton.setText(_translate("MainWindow", "next step"))

    def license_ok(self):
        self.pushButton.setEnabled(True)

    def license_no(self):
        self.pushButton.setEnabled(False)

    def show_next(self):
        try:
            # print("1")
            # global indexwindows
            # print("1")
            # indexwindows = QMainWindow()
            # print("1")
            # index_ui = login()
            # print("1")
            # index_ui.setupUi(indexwindows)
            # print("1")
            # indexwindows.show()
            # print("1")
            # self.MainWindow.hide()
            # #del self
            global Login_ui
            Login_ui.show()
            self.close()
        except Exception as e:
            print(e)


class login(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 236)
        MainWindow.setMinimumSize(QtCore.QSize(800, 236))
        MainWindow.setMaximumSize(QtCore.QSize(800, 236))
        self.MainWindow = MainWindow
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 20, 711, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 20, 71, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 71, 31))
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(80, 70, 711, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 130, 171, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(590, 130, 181, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(280, 130, 181, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # self.pushButton_2.pyqtConfigure(objectName='pushButton_2',clicked=self.goto_new_window)
        self.pushButton.clicked.connect(self.goto_new_window)
        self.pushButton_3.clicked.connect(self.goto_exit)
        self.pushButton_2.clicked.connect(self.goto_register_window)

        # print("11")
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow0", "登录到口罩佩戴检测系统"))
        self.label.setText(_translate("MainWindow0", "Account:"))
        self.label_2.setText(_translate("MainWindow0", "Password:"))
        self.pushButton.setText(_translate("MainWindow0", "login"))
        self.pushButton_2.setText(_translate("MainWindow0", "register"))
        self.pushButton_3.setText(_translate("MainWindow0", "exit"))

    def goto_new_window(self):
        if os.path.exists("known.ini"):
            print("not first use")
        else:
            f = open("known.ini", "a+")
            print("[status]\nlogin.ini created\n[end]", file=f)
            f.close()
        conn = sqlite3.connect(database('login'))
        cursor = conn.cursor()
        try:
            sql = "CREATE TABLE LOGIN(ACCOUNT PRIMARY KRY TEXT NOT NULL, PASSWORD TEXT NOT NULL)"
            cursor.execute(sql)
            result = cursor.fetchall()
            conn.commit()
        except sqlite3.OperationalError as E:
            print(E)
        cursor.close()
        conn.close()
        # 此处表头创建完成<避免在无数据库文件时报错>
        # 登录验证操作
        conn = sqlite3.connect(database('login'))
        cursor = conn.cursor()
        # 获取用户名和密码
        account = self.lineEdit.text()
        password = self.lineEdit_2.text()
        sql = "SELECT * from LOGIN WHERE ACCOUNT = '%s' AND PASSWORD = '%s'" % (account, password)
        print(cursor.execute(sql))
        result = cursor.fetchall()
        conn.commit()
        # print(result)
        cursor.close()
        conn.close()
        if result == []:
            QMessageBox.warning(self, '密码错误', '密码错误', QMessageBox.Yes)
        else:
            # 此处可以连接下一个登录界面
            global main_ui
            main_ui.show()
            self.close()

    def goto_register_window(self):
        try:
            # print("1")
            # global indexwindows0
            # indexwindows0 = QMainWindow()
            # index_ui = Register()
            # index_ui.setupUi(indexwindows0)
            # indexwindows0.show()
            # self.MainWindow.close()
            # --------------------------#
            # app0 = QApplication(sys.argv)
            # mainwindow = QMainWindow()
            # output = login()
            # # output1 = login()
            # ui = output
            # ui.setupUi(mainwindow)
            # mainwindow.show()
            # sys.exit(app0.exec())
            global Register_ui
            Register_ui.show()
            self.close()
        except Exception as e:
            print(e)

    def goto_exit(self):
        exit(0)


class Register(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 218)
        MainWindow.setMinimumSize(QtCore.QSize(800, 218))
        MainWindow.setMaximumSize(QtCore.QSize(800, 218))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(70, 10, 91, 31))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(60, 50, 91, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 90, 141, 31))
        self.label_3.setObjectName("label_3")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(130, 10, 661, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(130, 50, 661, 31))
        self.lineEdit_2.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(130, 90, 661, 31))
        self.lineEdit_3.setEchoMode(QtWidgets.QLineEdit.Password)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(240, 130, 281, 41))
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.pushButton.clicked.connect(self.pull_info_to_database)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "注册到口罩佩戴检测系统"))
        self.label.setText(_translate("MainWindow", "Account:"))
        self.label_2.setText(_translate("MainWindow", "Password:"))
        self.label_3.setText(_translate("MainWindow", "Confirm password:"))
        self.pushButton.setText(_translate("MainWindow", "Create Account"))

    def pull_info_to_database(self):
        # 连接数据库
        user_account = self.lineEdit.text()
        user_password = self.lineEdit_2.text()
        confirm_password = self.lineEdit_3.text()
        if user_account == '':
            a = QMessageBox.warning(self, '用户名不能为空', '用户名不能为空', QMessageBox.Yes)
            return
        if user_password == '':
            a = QMessageBox.warning(self, '密码不能为空', '密码不能为空', QMessageBox.Yes)
            return
        if user_password == user_account:
            a = QMessageBox.warning(self, '用户名不能与密码相同', '用户名不能与密码相同', QMessageBox.Yes)
            return
        if user_password != confirm_password:
            a = QMessageBox.warning(self, '两次密码不一致，请重新输入', '两次密码不一致，请重新输入', QMessageBox.Yes)
            return
        # 检查通过，连接数据库
        conn = sqlite3.connect(database('login'))
        cursor = conn.cursor()
        try:
            sql = "CREATE TABLE LOGIN(ACCOUNT PRIMARY KEY NOT NULL, PASSWORD TEXT NOT NULL)"
            cursor.execute(sql)
            result = cursor.fetchall()
            conn.commit()
        except sqlite3.OperationalError as E:
            print(E)
        cursor.close()
        conn.close()
        conn = sqlite3.connect(database('login'))
        cursor = conn.cursor()
        try:
            sql = "insert into LOGIN values('%s', '%s')" % (user_account, user_password)
            print(cursor.execute(sql))
            result = cursor.fetchall()
            conn.commit()
            # print(result)
            cursor.close()
            conn.close()
            QMessageBox.information(self, '注册完成', '注册完成')
            Login_ui.show()
            self.close()
        except:
            QMessageBox.warning(self, '提示', '用户名已存在')

class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1130, 730)
        MainWindow.setMinimumSize(QtCore.QSize(1130,730))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 661, 671))
        self.groupBox.setObjectName("groupBox")
        self.graphicsView = QtWidgets.QGraphicsView(self.groupBox)
        self.graphicsView.setGeometry(QtCore.QRect(10, 20, 640, 640))
        self.graphicsView.setObjectName("graphicsView")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 20, 640, 640))
        self.label.setObjectName("label")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(680, 10, 441, 71))
        self.groupBox_2.setObjectName("groupBox_2")
        self.radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton.setGeometry(QtCore.QRect(10, 30, 71, 19))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_2.setGeometry(QtCore.QRect(120, 30, 71, 19))
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_3 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_3.setGeometry(QtCore.QRect(230, 30, 95, 19))
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.groupBox_2)
        self.radioButton_4.setGeometry(QtCore.QRect(360, 30, 95, 19))
        self.radioButton_4.setObjectName("radioButton_4")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(680, 90, 441, 181))
        self.groupBox_3.setObjectName("groupBox_3")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit.setGeometry(QtCore.QRect(92, 30, 251, 21))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(10, 30, 81, 20))
        self.label_2.setObjectName("label_2")
        self.pushButton = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton.setGeometry(QtCore.QRect(350, 30, 75, 21))
        self.pushButton.setObjectName("pushButton")
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        self.label_3.setGeometry(QtCore.QRect(10, 70, 81, 16))
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_2.setGeometry(QtCore.QRect(92, 70, 251, 21))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_2.setGeometry(QtCore.QRect(350, 70, 75, 21))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_4 = QtWidgets.QLabel(self.groupBox_3)
        self.label_4.setGeometry(QtCore.QRect(10, 110, 81, 16))
        self.label_4.setObjectName("label_4")
        self.pushButton_3 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_3.setGeometry(QtCore.QRect(350, 110, 75, 21))
        self.pushButton_3.setObjectName("pushButton_3")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_3.setGeometry(QtCore.QRect(90, 110, 251, 21))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.label_5 = QtWidgets.QLabel(self.groupBox_3)
        self.label_5.setGeometry(QtCore.QRect(10, 150, 71, 20))
        self.label_5.setObjectName("label_5")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.groupBox_3)
        self.lineEdit_4.setGeometry(QtCore.QRect(90, 150, 251, 21))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.pushButton_4 = QtWidgets.QPushButton(self.groupBox_3)
        self.pushButton_4.setGeometry(QtCore.QRect(350, 150, 75, 21))
        self.pushButton_4.setObjectName("pushButton_4")
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(680, 280, 441, 401))
        self.groupBox_4.setObjectName("groupBox_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.groupBox_4)
        self.textBrowser.setGeometry(QtCore.QRect(10, 20, 421, 371))
        self.textBrowser.setObjectName("textBrowser")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1131, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # clicked some info
        self.radioButton_4.setChecked(True)
        # connect all the signals
        self.radioButton.clicked.connect(self.choose_image)
        self.radioButton_2.clicked.connect(self.choose_video)
        self.radioButton_3.clicked.connect(self.choose_camera)
        self.radioButton_4.clicked.connect(self.choose_stop)
        self.pushButton.clicked.connect(self.choose_model_path)
        self.pushButton_2.clicked.connect(self.choose_image_path)
        self.pushButton_3.clicked.connect(self.choose_video_path)
        self.pushButton_4.clicked.connect(self.choose_camera_id)
        # self.timer
        self.timer=QTimer(self)
        self.timer.timeout.connect(self.runtime_detect_image)
        self.timer.timeout.connect(self.program_runtime)
        self.timer.start(1)
        # class settings
        self.control_0 = 4
        self.model_analyse_type = 0
        self.img_path = None
        self.vid_path = None
        self.total_frame = None
        self.current_frame = 0
        self.camera_id = None
        self.relax = True
        self.cap_released = True
        self.put_frame = None
        self.model = None
        self.cap = None
        self.first_cookie_btn1 = True
        self.first_cookie_btn2 = True
        self.first_cookie_btn3 = True
        self.first_cookie_btn4 = True
        self.colors = None
        self.model_filename = None
        self.model_safety_copy = None
        self.model_copied = False
        self.time_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "mask_detect version 1.0.0"))
        self.groupBox.setTitle(_translate("MainWindow", "frame_output"))
        self.label.setText(_translate("MainWindow", ""))
        self.groupBox_2.setTitle(_translate("MainWindow", "program_control"))
        self.radioButton.setText(_translate("MainWindow", "image"))
        self.radioButton_2.setText(_translate("MainWindow", "video"))
        self.radioButton_3.setText(_translate("MainWindow", "camera"))
        self.radioButton_4.setText(_translate("MainWindow", "stop"))
        self.groupBox_3.setTitle(_translate("MainWindow", "settings"))
        self.label_2.setText(_translate("MainWindow", "model_path:"))
        self.pushButton.setText(_translate("MainWindow", "choose"))
        self.label_3.setText(_translate("MainWindow", "image_path:"))
        self.pushButton_2.setText(_translate("MainWindow", "choose"))
        self.label_4.setText(_translate("MainWindow", "video_path:"))
        self.pushButton_3.setText(_translate("MainWindow", "choose"))
        self.label_5.setText(_translate("MainWindow", "camera_id:"))
        self.pushButton_4.setText(_translate("MainWindow", "set"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Program_output"))

    def runtime_detect_image(self):
        if self.control_0 == 1:
            """
            图片路径：self.img_path
            """
            self.relax = False
            if self.img_path==None or self.img_path== "" or self.model == None:
                if self.first_cookie_btn1:
                    return
                else:
                    self.first_cookie_btn1 = True
                    QMessageBox.critical(self,"严重错误","文件或模型为空")
                    return
            mat = cv2.imread(self.img_path)
            self.default_image_process(mat)
            self.control_0 = 4
            self.radioButton_4.setChecked(True)
            return

        elif self.control_0 == 2:
            """
            视频路径：self.vid_path
            当前帧：self.current_frame
            总帧数：self.total_frame
            """
            try:
                self.relax = False
                self.cap_released = False
                if self.current_frame == self.total_frame:
                    if self.current_frame!=0:
                        if self.first_cookie_btn2 == True:
                            return
                        QMessageBox.critical(self,"严重错误","视频读取失败,点击确定重置系统")
                        self.first_cookie_btn2 = True
                        self.current_frame = 0
                        self.total_frame = 0
                        return
                    if self.vid_path == None or self.vid_path =="":
                        if self.first_cookie_btn2 == True:
                            return
                        QMessageBox.critical(self,"严重错误","视频路径为空")
                        self.first_cookie_btn2 = True
                        return
                    if self.model == None:
                        if self.first_cookie_btn2 == True:
                            return
                        QMessageBox.critical(self,"严重错误","模型为空")
                        self.first_cookie_btn2 = True
                        return
                    self.cap = cv2.VideoCapture(self.vid_path)
                    self.total_frame = self.cap.get(cv2.CAP_PROP_FRAME_COUNT)
                    self.current_frame = 0
                else:
                    self.current_frame = self.current_frame + 1
                    # read_ok,frame = self.cap.set(cv2.CAP_PROP_POS_FRAMES,self.current_frame)
                    # if not read_ok:
                    #     self.cap.release()
                    #     self.cap = None
                    #     self.cap_released =True
                    #     self.total_frame = 0
                    #     self.current_frame = 0
                    #     self.vid_path=""
                    #     if self.first_cookie_btn2 == True:
                    #         return
                    #     QMessageBox.critical(self,"严重错误","视频未准备就绪")
                    #     self.first_cookie_btn2 = True
                    #     return
                    # t = cv2.getTickCount()
                    # self.default_image_process(frame)
                    # return
                    self.cap.set(cv2.CAP_PROP_POS_FRAMES, self.current_frame)
                    is_ok, frame = self.cap.read()
                    if frame is None:
                        """
                        无图片，退出
                        """
                        self.cap.release()
                        self.cap = None
                        self.cap_released = True
                        self.total_frame = 0
                        self.current_frame = 0
                        self.vid_path = ""
                        self.first_cookie_btn2 = True
                        self.current_frame = 0
                        self.total_frame = 0
                        self.radioButton_4.setChecked(True)
                        self.control_0 = 4
                    # print("2-3")
                    t = cv2.getTickCount()
                    # print(frame)
                    self.default_image_process(frame)
                    # print("2-4")
                    return
            except Exception as e:
                # QMessageBox.critical(self, "捕捉到严重错误", "ERROR=\n" + str(e))
                self.first_cookie_btn2 = True
                self.current_frame = 0
                self.total_frame = 0
                self.radioButton_4.setChecked(True)
                self.control_0 = 4
                print(e)

        elif self.control_0 == 3:
            """
            摄像头ID:self.camera_id
            #注：结束后不要关闭camera,等待self.relax=True时，关闭摄像头
            """
            try:
                self.relax = False
                if self.cap_released == False:
                    read_ok,frame = self.cap.read()
                    if read_ok == False:
                        self.cap.release()
                        self.cap_released = True
                        self.cap = None
                        QMessageBox.critical(self,"严重错误","读取摄像头失败")
                        self.radioButton_4.setChecked(True)
                        self.control_0 = 4
                    t = cv2.getTickCount()
                    self.default_image_process(frame)
                    return
                else:
                    if self.camera_id == None:
                        if self.first_cookie_btn3 == True:
                            return
                        QMessageBox.critical(self,"严重错误","摄像头ID为空")
                        self.first_cookie_btn3 = True
                        return
                    if type(self.camera_id) != int:
                        if self.first_cookie_btn3 == True:
                            return
                        QMessageBox.critical(self,"严重错误","摄像头ID为不能为非int类型数据")
                        self.first_cookie_btn3 = True
                        return
                    if self.camera_id <=-1:
                        if self.first_cookie_btn3 == True:
                            return
                        QMessageBox.critical(self,"严重错误","摄像头ID非法")
                        self.first_cookie_btn3 = True
                        return
                    if self.model == None or self.model == "":
                        if self.first_cookie_btn3 == True:
                            return
                        QMessageBox.critical(self,"严重错误","模型文件缺失")
                        self.first_cookie_btn3 = True
                        return
                    print(self.camera_id)
                    self.cap = cv2.VideoCapture(self.camera_id)
                    self.cap_released = False
                    read_ok,frame = self.cap.read()
                    if read_ok == False:
                        return
                    t = cv2.getTickCount()
                    self.default_image_process(frame)
                    return
            except Exception as e:
                QMessageBox.critical(self,"捕捉到严重错误","ERROR=\n"+str(e))
                print(e)
                self.control_0 = 4
                self.radioButton_4.setChecked(True)
        elif self.control_0 == 4:
            """
            强制停止位：stop
            """
            self.relax = True
            try:
                if self.cap_released == False:
                    self.cap.release()
                    self.cap_released = True
            except Exception as e:
                self.cap_released = True
            if self.first_cookie_btn4:
                return
            else:
                # self.textBrowser.insertPlainText(self.time_str+"[INFO] :程序强制停止完成\n")
                QMessageBox.information(self,'提示','程序强制停止完成')
                self.first_cookie_btn4 = True
        else:
            # self.textBrowser.insertPlainText(self.time_str+"[ERROR]:严重错误->程序内部错误\n")
            QMessageBox.critical(self,'严重错误','本程序出现内部错误，重新安装本程序以解决此问题')
            exit(0)
    def program_runtime(self):
        """
        funcion : 将put_frame中的信息显示到label上
        :return: None
        """
        self.time_str=time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
        str_textBrowser = self.textBrowser.toPlainText()
        length = len(str_textBrowser)
        if length >=1000:
            self.textBrowser.setText("")
        try:
            frame = self.put_frame.copy()
            qimg = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            Qtimg = QtGui.QImage(qimg.data,
                                 qimg.shape[1],
                                 qimg.shape[0],
                                 qimg.shape[1]*3,
                                 QtGui.QImage.Format_RGB888)
            self.label.setPixmap(QtGui.QPixmap.fromImage(Qtimg))
            self.label.setScaledContents(True)
            self.label.show()
        except:
            return

    def resizeEvent(self, event: QtGui.QResizeEvent) -> None:
        """
        此处为窗口resize事件
        :param a0:
        :return: None
        """
        program_x = 1130
        program_y = 730
        current_width = event.size().width()
        current_height = event.size().height()
        x_rate = current_width/program_x
        x_rate = x_rate if x_rate>=1 else 1
        y_rate = current_height/program_y
        y_rate = y_rate if y_rate>=1 else 1
        fontsize = QtGui.QFont()
        font_rate = x_rate if x_rate>y_rate else y_rate
        fontsize.setPointSize(int(9*font_rate))
        self.groupBox.setFont(fontsize)
        self.groupBox_2.setFont(fontsize)
        self.groupBox_3.setFont(fontsize)
        self.groupBox_4.setFont(fontsize)
        self.groupBox.setGeometry(QtCore.QRect(int(10*x_rate),int(10*y_rate),int(661*x_rate),int(671*y_rate)))
        self.graphicsView.setGeometry(QtCore.QRect(int(10*x_rate),int(20*y_rate),int(640*x_rate),int(640*y_rate)))
        self.label.setGeometry(QtCore.QRect(int(10*x_rate),int(20*y_rate),int(640*x_rate),int(640*y_rate)))
        self.groupBox_2.setGeometry(QtCore.QRect(int(680*x_rate),int(10*y_rate),int(441*x_rate),int(71*y_rate)))
        self.radioButton.setGeometry(QtCore.QRect(int(10*x_rate),int(30*y_rate),int(71*x_rate),int(19*y_rate)))
        self.radioButton_2.setGeometry(QtCore.QRect(int(120*x_rate),int(30*y_rate),int(71*x_rate),int(19*y_rate)))
        self.radioButton_3.setGeometry(QtCore.QRect(int(230*x_rate),int(30*y_rate),int(95*x_rate),int(19*y_rate)))
        self.radioButton_4.setGeometry(QtCore.QRect(int(360*x_rate),int(30*y_rate),int(95*x_rate),int(19*y_rate)))
        self.groupBox_3.setGeometry(QtCore.QRect(int(680*x_rate),int(90*y_rate),int(441*x_rate),int(181*y_rate)))
        self.label_2.setGeometry(QtCore.QRect(int(10*x_rate),int(30*y_rate),int(81*x_rate),int(20*y_rate)))
        self.lineEdit.setGeometry(QtCore.QRect(int(92*x_rate),int(30*y_rate),int(251*x_rate),int(21*y_rate)))
        self.pushButton.setGeometry(QtCore.QRect(int(350*x_rate),int(30*y_rate),int(75*x_rate),int(21*y_rate)))
        self.label_3.setGeometry(QtCore.QRect(int(10*x_rate),int(70*y_rate),int(81*x_rate),int(16*y_rate)))
        self.lineEdit_2.setGeometry(QtCore.QRect(int(92*x_rate),int(70*y_rate),int(251*x_rate),int(21*y_rate)))
        self.pushButton_2.setGeometry(QtCore.QRect(int(350*x_rate),int(70*y_rate),int(75*x_rate),int(21*y_rate)))
        self.label_4.setGeometry(QtCore.QRect(int(10*x_rate),int(110*y_rate),int(81*x_rate),int(16*y_rate)))
        self.lineEdit_3.setGeometry(QtCore.QRect(int(90*x_rate),int(110*y_rate),int(251*x_rate),int(21*y_rate)))
        self.pushButton_3.setGeometry(QtCore.QRect(int(350*x_rate),int(110*y_rate),int(75*x_rate),int(21*y_rate)))
        self.label_5.setGeometry(QtCore.QRect(int(10*x_rate),int(150*y_rate),int(71*x_rate),int(20*y_rate)))
        self.lineEdit_4.setGeometry(QtCore.QRect(int(90*x_rate),int(150*y_rate),int(251*x_rate),int(21*y_rate)))
        self.pushButton_4.setGeometry(QtCore.QRect(int(350*x_rate),int(150*y_rate),int(75*x_rate),int(21*y_rate)))
        self.groupBox_4.setGeometry(QtCore.QRect(int(680*x_rate),int(280*y_rate),int(441*x_rate),int(401*y_rate)))
        self.textBrowser.setGeometry(QtCore.QRect(int(10*x_rate),int(20*y_rate),int(421*x_rate),int(371*y_rate)))


    def choose_image_path(self):
        try:
            filename,type = QFileDialog.getOpenFileName(self,"选择模型",os.getcwd(),"IMAGE FILE(*.*)")
            if filename =="":
                return
            self.img_path=filename
            self.lineEdit_2.setEnabled(True)
            self.lineEdit_2.setText(filename)
            self.lineEdit_2.setEnabled(False)
        except Exception as e:
            print(e)

    def choose_video_path(self):
        try:
            filename, type = QFileDialog.getOpenFileName(self, "选择模型", os.getcwd(), "VIDEO FILE(*.*)")
            if filename == "":
                return
            self.vid_path = filename
            self.lineEdit_3.setEnabled(True)
            self.lineEdit_3.setText(filename)
            self.lineEdit_3.setEnabled(False)
        except Exception as e:
            print(e)

    def choose_camera_id(self):
        str1 = self.lineEdit_4.text()
        try:
            str_1 = int(str1)
            self.camera_id = str_1
        except:
            QMessageBox.critical(self,"错误","请填写不小于0的整数")
        pass

    def choose_model_path(self):
        filename, type = QFileDialog.getOpenFileName(self, "选择模型", os.getcwd(), "Pytorch model file(*.pt)")
        if filename == "":
            return
        self.model = None
        self.model_filename = None
        self.model_analyse_type = -1
        self.model_filename = filename
        try:
            self.load_model_default(filename)
            print('default load ok')
            return
        except Exception as e:
            try:
                self.load_model_patch_01(filename)
                print('patch load ok')
                return
            except Exception as E:
                QMessageBox.critical(self,"严重错误","ERROR="+str(E))
            QMessageBox.critical(self,"严重错误","ERROR="+str(e))

    def load_model_default(self,filename):
        # print(filename)
        self.model = YOLO(filename)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setText(filename)
        self.lineEdit.setEnabled(False)
        self.model_analyse_type = 0
        self.model_copied = False
        return

    def load_model_patch_01(self,filename):
        try:
            device = 'cuda' if torch.cuda.is_available() else 'cpu'
            model = attempt_load(filename)
            stride = int(model.stride.max())
            imgsz = check_img_size(640,s=stride)
            # half = 'cuda' if torch.cuda.is_available() else 'cpu' != 'cpu'
            # if half:
            #     model.half()
            if torch.cuda.is_available():
                model.cuda()
            if device == 'cuda':
                model(torch.zeros(1,3,imgsz,imgsz).to(device).type_as(next(model.parameters()))) #run once
            self.model = model
            # self.model_safety_copy = copy(model)
            self.lineEdit.setEnabled(True)
            self.lineEdit.setText(filename)
            self.lineEdit.setEnabled(False)
            self.model_analyse_type = 1
            self.model_copied = True
        except Exception as e:
            print(e)
        return

    def default_image_process(self,mat_input):
        """
        模型自适应加载，自适应识别，由外部启动
        Returns: None
        """
        # print('analyse_type=',self.model_analyse_type)
        try:
            self.default_process(mat_input)
        except Exception as E:
            # if self.model_copied:
            #     self.model = copy(self.model_safety_copy)
            # else:
            if not self.model_copied:
                self.load_model_patch_01(self.model_filename)
            self.process_patch_01(mat_input)


    def default_process(self,mat_input):
        """
        基础解释框架:由外部启动
        Returns:None
        """
        t0 = time.time()
        result = self.model(mat_input)
        annotated_frame = result[0].plot()
        names_0 = 0
        names_1 = 0
        names_2 = 0
        boxes = result[0].boxes
        for i in range(len(boxes.cls)):
            if boxes.cls[i] == 0:
                names_0 += 1
                cv2.putText(annotated_frame, "wear mask",
                            (int(boxes.xyxy[i][0]), int(boxes.xyxy[i][1] - 20)),
                            cv2.FONT_HERSHEY_COMPLEX, 1.0, (0, 0, 255), 2, cv2.LINE_AA)
            if boxes.cls[i] == 1:
                names_1 += 1
            if boxes.cls[i] == 2:
                names_2 += 1
                cv2.putText(annotated_frame, "wear mask correctly",
                            (int(boxes.xyxy[i][0]), int(boxes.xyxy[i][1] - 20)),
                            cv2.FONT_HERSHEY_COMPLEX, 1.0, (0, 0, 255), 2, cv2.LINE_AA)
        preprocess_speed = result[0].speed['preprocess']
        inference_speed = result[0].speed['inference']
        postprocess_speed = result[0].speed['postprocess']
        output_str = "detected_info\n" + result[0].names[0] + "=" + str(names_0) + "\n" + result[0].names[
            1] + "=" + str(names_1) + "\n" \
                     + result[0].names[2] + "=" + str(names_2) + "\n" + "speed_info\n" + "preprocess=" + str(
            preprocess_speed) + "ms\n" \
                     + "inference=" + str(inference_speed) + "ms" + "\n" + "postprocess=" + str(
            postprocess_speed) + "ms\n"
        self.textBrowser.setText(self.time_str + "\n" + output_str)
        t1 = time.time()
        if self.control_0!=1:
            fps = int(1.0//(t1-t0))
            txt = 'FPS:' + str(fps)
            cv2.putText(annotated_frame, txt, (10, 50),
                        cv2.FONT_HERSHEY_COMPLEX,
                        2.0, (0, 255, 0), 5, cv2.LINE_AA)
        self.put_frame = annotated_frame.copy()

    def process_patch_01(self,mat_input):
        """
        基础解释框架补丁包：修复YOLOV5模型无法读取识别的问题
        Returns:None
        """
        t0 = time.time()
        device = 'cuda' if torch.cuda.is_available() else 'cpu'
        # half = 'cuda' if torch.cuda.is_available() else 'cpu' != 'cpu'
        stride = int(self.model.stride.max())
        imgsz = check_img_size(640,s=stride)
        dataset = LoadImages(mat_input,img_size=imgsz)
        names = self.model.module.names if hasattr(self.model, 'module') else self.model.names
        if self.colors ==None:
            self.colors = [[random.randint(0, 255) for _ in range(3)] for _ in names]
        path, img, im0s, vid_cap = dataset
        img = torch.from_numpy(img).to(device)
        # img = img.half() if half else img.float()  # uint8 to fp16/32
        img = img.float()
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)
        t1 = time_synchronized()
        pred = self.model(img, augment=False)[0]
        pred = non_max_suppression(pred, 0.25, 0.45, agnostic=False)
        t2 = time_synchronized()
        num_0 = 0
        num_1 = 0
        num_2 = 0
        for i, det in enumerate(pred):
            p, s, im0, frame = None, '', im0s, getattr(dataset, 'frame', 0)
            gn = torch.tensor(im0.shape)[[1, 0, 1, 0]]
            # print(len(det))
            if len(det):
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()
                for *xyxy, conf, cls in reversed(det):
                    label = f'{names[int(cls)]} {conf:.2f}'
                    plot_one_box(xyxy, im0, label=label, color=self.colors[int(cls)], line_thickness=3)
                    if int(cls) == 0:
                        num_0 += 1
                    if int(cls) == 1:
                        num_1 += 1
                    if int(cls) == 2:
                        num_2 += 1
        t3 = time.time()
        t00 = t1 - t0
        t01 = t2 - t1
        t02 = t3 - t2
        output_str = "detect_info\nno_mask="+str(num_0)+"\nmask="+str(num_1)+"\nincorrect-mask=" \
                    "="+str(num_2)+"\nspeed_info\npreprocess="+str(t00*1000)+"ms\ninference="+str(t01*1000)+"ms\npostprocess="+str(t02*1000)+"ms\n"
        self.textBrowser.setText(self.time_str+"\n"+output_str)
        if self.control_0!=1:
            fps = int(1.0//(t3-t0))
            txt = 'FPS:' + str(fps)
            cv2.putText(im0, txt, (10, 50),
                        cv2.FONT_HERSHEY_COMPLEX,
                        2.0, (0, 255, 0), 5, cv2.LINE_AA)
        self.put_frame = im0.copy()
        return

    def choose_image(self):
        self.control_0 = 1
        self.first_cookie_btn1 = False

    def choose_video(self):
        self.control_0 = 2
        self.first_cookie_btn2 = False

    def choose_camera(self):
        self.control_0 = 3
        self.first_cookie_btn3 = False

    def choose_stop(self):
        self.control_0 = 4
        self.first_cookie_btn4 = False

def main():
    global main_ui
    app = QApplication(sys.argv)
    main_ui = Ui_MainWindow()
    main_ui.show()
    sys.exit(app.exec())

def start():
    app = QApplication(sys.argv)
    global Login_ui,Register_ui,main_ui
    License_ui = show_license()
    Login_ui = login()
    Register_ui = Register()
    main_ui = Ui_MainWindow()
    if os.path.exists("known.ini"):
        Login_ui.show()
    else:
        License_ui.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    try:
        start()
    except Exception as e:
        print(e)
